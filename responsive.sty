% support for responsive font size, based on the document dimensions
\ProvidesPackage{responsive}
\RequirePackage{expl3,l3keys2e}
\RequirePackage{kvoptions}
\ProvidesExplPackage{responsive}
{2020-08-15}{0.1}{Responsive design for LaTeX}

%%%%%%%%%%%%%%%%%%%%%%
% keyval  processing %
%%%%%%%%%%%%%%%%%%%%%%

% numbers of characters that should fit on the line
\int_new:N\l_resp_charlines_int
\l_resp_charlines_int = 55
\keys_define:nn {responsive} {
  characters .int_set:N = \l_resp_charlines_int,
}

% type of typograhic scale
\tl_new:N\l_resp_scaletype_str
\tl_set:Nn\l_resp_scaletype_str {pentatonic}
\keys_define:nn {responsive} {
  scale .tl_set:N = \l_resp_scaletype_str,
}


\ProcessKeysOptions{responsive}


% the \l_resp_charlist_tl is used to construct string used for line length measurement
\str_new:N\l_resp_alphabet_tl
\str_new:N\l_resp_charlist_tl
% construct really long string that will enable to measure wide number of characters 
% on a text line
\str_set:Nn\l_resp_alphabet_tl{abcdefghijklmnopqrstuvwxyz}
\str_set:NV\l_resp_charlist_tl{
  \l_resp_alphabet_tl\l_resp_alphabet_tl\l_resp_alphabet_tl
  \l_resp_alphabet_tl\l_resp_alphabet_tl\l_resp_alphabet_tl
  \l_resp_alphabet_tl\l_resp_alphabet_tl\l_resp_alphabet_tl
  \l_resp_alphabet_tl\l_resp_alphabet_tl\l_resp_alphabet_tl
}


% these numbers are used in the typo scale calculation
\fp_new:N\l_resp_scalen_fp
\fp_new:N\l_resp_scaler_fp

% decide which typographic scale should be used
\str_case_e:nn{\l_resp_scaletype_str}{
  {heptatonic}{
  \fp_set:Nn\l_resp_scaler_fp{2}
  \fp_set:Nn\l_resp_scalen_fp{7}
  }
  {pentatonic}{
  \fp_set:Nn\l_resp_scaler_fp{2}
  \fp_set:Nn\l_resp_scalen_fp{5}
  }
  {tetratonic}{
  \fp_set:Nn\l_resp_scaler_fp{2}
  \fp_set:Nn\l_resp_scalen_fp{4}
  }
  {tritonic}{
  \fp_set:Nn\l_resp_scaler_fp{2}
  \fp_set:Nn\l_resp_scalen_fp{3}
  }
  {golden}{
  \fp_set:Nn\l_resp_scaler_fp{1.618}
  \fp_set:Nn\l_resp_scalen_fp{2}
  }
}

% change font size to fix text to a given width
% usage \fonttobox{\textwidth}{hello world}
% optional parameter changes line spacing, smaller the value, bigger the spacing
% details about the value are in the following article:
% https://www.smashingmagazine.com/2020/07/css-techniques-legibility/
\newcommand\fonttobox[3][38]{%
  % set initial fontsize and typeset text in a box
  \fontsize{10}{12}\selectfont
  \dimen1=#2\relax\setbox0=\hbox{#3}%
  % calculate ratio betwen the typeset box and desired width
  \l_tmpa_dim=\fp_to_dim:n {\f@size * (\dim_to_fp:n{\dimen1} / \dim_to_fp:n{\wd0})}%
  % calculate line height. inspired by https://www.smashingmagazine.com/2020/07/css-techniques-legibility/
  \dimen2=\fp_to_dim:n {\dim_to_fp:n{1ex} * (\dim_to_fp:n{\dimen1} / \dim_to_fp:n{\wd0}) / (#1/100)}
  \fontsize{\l_tmpa_dim}{\dimen2}\selectfont%
  \typeout{calculated font size: \fp_to_dim:n {\dim_to_fp:n{\dimen1} / \dim_to_fp:n{\wd0}}, \f@size, \the\baselineskip}%
}

% calculate typographic scale 
% based on formula from https://spencermortensen.com/articles/typographic-scale/
% #1 - base size, #2, number of note, #3 r, #4 n
\newcommand\typoscale[4]{%
  \fp_to_dim:n{\dim_to_fp:n{#1} * (#3 ^ (#2/#4)) }
}


% #1 number of characters that should fit to a text line
\newcommand\setsizes[2][32]{%
  \fonttobox[#1]{\textwidth}{#2}%
  % \let\orig@normalsize\normalsize%
  % \fp_set:Nn\l_resp_scaler_fp{2}
  % \fp_set:Nn\l_resp_scalen_fp{5}
  \DeclareRobustCommand\normalsize{\@setfontsize\normalsize{\l_tmpa_dim}{\dimen2}}%
  \DeclareRobustCommand\tiny{\@setfontsize\tiny{\typoscale{\l_tmpa_dim}{-3}{\l_resp_scaler_fp}{\l_resp_scalen_fp}}{\typoscale{\dimen2}{-3}{\l_resp_scaler_fp}{\l_resp_scalen_fp}}}
  \DeclareRobustCommand\scriptsize{\@setfontsize\scriptsize{\typoscale{\l_tmpa_dim}{-2}{\l_resp_scaler_fp}{\l_resp_scalen_fp}}{\typoscale{\dimen2}{-2}{\l_resp_scaler_fp}{\l_resp_scalen_fp}}}
  \DeclareRobustCommand\small{\@setfontsize\small{\typoscale{\l_tmpa_dim}{-1}{\l_resp_scaler_fp}{\l_resp_scalen_fp}}{\typoscale{\dimen2}{-1}{\l_resp_scaler_fp}{\l_resp_scalen_fp}}}
  \DeclareRobustCommand\footnotesize{\@setfontsize\footnotesize{\typoscale{\l_tmpa_dim}{-2}{\l_resp_scaler_fp}{\l_resp_scalen_fp}}{\typoscale{\dimen2}{-2}{\l_resp_scaler_fp}{\l_resp_scalen_fp}}}
  \DeclareRobustCommand\large{\@setfontsize\normalsize{\typoscale{\l_tmpa_dim}{2}{\l_resp_scaler_fp}{\l_resp_scalen_fp}}{\typoscale{\dimen2}{2}{\l_resp_scaler_fp}{\l_resp_scalen_fp}}}
  \DeclareRobustCommand\Large{\@setfontsize\Large{\typoscale{\l_tmpa_dim}{3}{\l_resp_scaler_fp}{\l_resp_scalen_fp}}{\typoscale{\dimen2}{3}{\l_resp_scaler_fp}{\l_resp_scalen_fp}}}
  \DeclareRobustCommand\LARGE{\@setfontsize\LARGE{\typoscale{\l_tmpa_dim}{4}{\l_resp_scaler_fp}{\l_resp_scalen_fp}}{\typoscale{\dimen2}{4}{\l_resp_scaler_fp}{\l_resp_scalen_fp}}}
  \DeclareRobustCommand\huge{\@setfontsize\huge{\typoscale{\l_tmpa_dim}{5}{\l_resp_scaler_fp}{\l_resp_scalen_fp}}{\typoscale{\dimen2}{5}{\l_resp_scaler_fp}{\l_resp_scalen_fp}}}
  \DeclareRobustCommand\Huge{\@setfontsize\Huge{\typoscale{\l_tmpa_dim}{6}{\l_resp_scaler_fp}{\l_resp_scalen_fp}}{\typoscale{\dimen2}{6}{\l_resp_scaler_fp}{\l_resp_scalen_fp}}}
  % \DeclareRobustCommand\Huge{\@setfontsize\Huge{\fp_to_dim:n{\dim_to_fp:n{\l_tmpa_dim*2}}}{\fp_to_dim:n{\dim_to_fp:n{\dimen2*2}}}}
}

%%%%%%%%%%%%%%%%%%%%%%%%%
%% Media query support %%
%%%%%%%%%%%%%%%%%%%%%%%%%

\prop_new:N \l_responsive_media_query
\bool_new:N \l_responsive_media_query_matched


% define new test for a media query
% #1 name of test
% #2 test that can be used in LaTeX 3 boolean query
\NewDocumentCommand\DeclareMediaQueryMatcher{m m}{
  \cs_set:cpn{responsive_query_test:#1}##1{#2}
}

% this command should be used by media query tests to symbolize that they were successful
\NewDocumentCommand\mediaquerytrue{}{\bool_set_true:N\l_responsive_media_query_matched}

%%%%%%%%%%%%%%%%%%%%%%%%%
%% media query tests %%%%
%%%%%%%%%%%%%%%%%%%%%%%%%

%  tests if the passed dimension is smaller than paperwidth
\DeclareMediaQueryMatcher{max-paperwidth}{
  \dim_compare:nT{\paperwidth>#1}{\mediaquerytrue}
}

%  tests if the passed dimension is larger than paperwidth
\DeclareMediaQueryMatcher{min-paperwidth}{
  \dim_compare:nT{\paperwidth<#1}{\mediaquerytrue}
}

% match exaxt paperwidth
\DeclareMediaQueryMatcher{paperwidth}{
  \dim_compare:nT{\paperwidth=#1}{\mediaquerytrue}
}

%  tests if the passed dimension is smaller than paperheight
\DeclareMediaQueryMatcher{max-paperheight}{
  \dim_compare:nT{\paperheight>#1}{\mediaquerytrue}
}

%  tests if the passed dimension is larger than paperheight
\DeclareMediaQueryMatcher{min-papeheight}{
  \dim_compare:nT{\paperheight<#1}{\mediaquerytrue}
}

% match exaxt paperheight
\DeclareMediaQueryMatcher{paperheight}{
  \dim_compare:nT{\paperheight=#1}{\mediaquerytrue}
}


%  tests if the passed dimension is smaller than textwidth
\DeclareMediaQueryMatcher{max-textwidth}{
  \dim_compare:nT{\textwidth>#1}{\mediaquerytrue}
}

%  tests if the passed dimension is larger than textwidth
\DeclareMediaQueryMatcher{min-textwidth}{
  \dim_compare:nT{\textwidth<#1}{\mediaquerytrue}
}

% match exaxt textwidth
\DeclareMediaQueryMatcher{textwidth}{
  \dim_compare:nT{\textwidth=#1}{\mediaquerytrue}
}

%  tests if the passed dimension is smaller than textheight
\DeclareMediaQueryMatcher{max-textheight}{
  \dim_compare:nT{\textheight>#1}{\mediaquerytrue}
}

%  tests if the passed dimension is larger than textheight
\DeclareMediaQueryMatcher{min-textheight}{
  \dim_compare:nT{\textheight<#1}{\mediaquerytrue}
}

% match exaxt textheight
\DeclareMediaQueryMatcher{textheight}{
  \dim_compare:nT{\textheight=#1}{\mediaquerytrue}
}

% test if the current page is in landscape mode
% we assume that if \paperwidth / \paperheight > 1 then we are in the landscape mode
\DeclareMediaQueryMatcher{orientation}{
  \str_if_eq:nnTF{#1}{landscape}{
    \fp_compare:nT{\dim_ratio:nn{\paperwidth}{\paperheight} > 1}{\mediaquerytrue}
  }{
    \fp_compare:nT{\dim_ratio:nn{\paperwidth}{\paperheight} < 1}{\mediaquerytrue}
  }
}


% find if handler exists for the passed media query type and execute it
\cs_set:Npn \l_responsive_handle_media_query#1#2{
  \cs_if_exist_use:cTF{responsive_query_test:#1}{{#2}}{}
}

% #1 - media query
% #2 - code executed when query matches
% #3 - code executed when query fails
\NewDocumentCommand\mediaquery{m m m}{
  % change the list of media queries to a property list, which we can loop over
  \prop_set_from_keyval:Nn\l_responsive_media_query{#1}
  % loop over all media queries
  \prop_map_inline:Nn\l_responsive_media_query{
    % initialize boolean condition for media queries
    \bool_set_false:N\l_responsive_media_query_matched
    % the media query handler must use \mediaquerytrue if the query matches
    \l_responsive_handle_media_query{##1}{##2}
    % escape the loop immediately if the query doesn't run \mediaquerytrue
    \bool_if:NF\l_responsive_media_query_matched{\prop_map_break:}
  }
  %
  \bool_if:NTF\l_responsive_media_query_matched{#2}{#3}

}



% setup font sizes at the begin document, in order to support Geometry etc.
\AtBeginDocument{
  % set the default font size, based on numbers of characters we want to show on a line of text
  % \fonttobox[32]\textwidth{\tl_range:Nnn\l_resp_charlist_tl{1}{\l_resp_charlines_int}}%
  \setsizes{\tl_range:Nnn\l_resp_charlist_tl{1}{\l_resp_charlines_int}}
}



\endinput
